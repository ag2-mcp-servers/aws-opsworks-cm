# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:55:30+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AWSOpsWorksCMResourceArn(
    RootModel[constr(pattern=r'arn:aws.*:opsworks-cm:.*:[0-9]{12}:.*')]
):
    root: constr(pattern=r'arn:aws.*:opsworks-cm:.*:[0-9]{12}:.*')


class AttributeName(
    RootModel[constr(pattern=r'[A-Z][A-Z0-9_]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[A-Z][A-Z0-9_]*', min_length=1, max_length=64)


class AttributeValue(RootModel[constr(pattern=r'\(\?s\).*', max_length=10000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=10000)


class BackupId(RootModel[constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-\.\:]*', max_length=79)]):
    root: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-\.\:]*', max_length=79)


class BackupRetentionCountDefinition(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class BackupStatus(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    OK = 'OK'
    FAILED = 'FAILED'
    DELETING = 'DELETING'


class BackupType(Enum):
    AUTOMATED = 'AUTOMATED'
    MANUAL = 'MANUAL'


class Boolean(RootModel[bool]):
    root: bool


class CustomCertificate(
    RootModel[
        constr(
            pattern=r'\(\?s\)\s*-----BEGIN CERTIFICATE-----.\+-----END CERTIFICATE-----\s*',
            max_length=2097152,
        )
    ]
):
    root: constr(
        pattern=r'\(\?s\)\s*-----BEGIN CERTIFICATE-----.\+-----END CERTIFICATE-----\s*',
        max_length=2097152,
    )


class CustomDomain(
    RootModel[
        constr(
            pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$',
            max_length=253,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])$',
        max_length=253,
    )


class CustomPrivateKey(RootModel[SecretStr]):
    root: SecretStr


class DeleteBackupRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')


class DeleteBackupResponse(BaseModel):
    pass


class DeleteServerResponse(BaseModel):
    pass


class DescribeAccountAttributesRequest(BaseModel):
    pass


class EngineAttributeName(RootModel[constr(pattern=r'\(\?s\).*', max_length=10000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=10000)


class EngineAttributeValue(RootModel[SecretStr]):
    root: SecretStr


class InstanceProfileArn(
    RootModel[
        constr(pattern=r'arn:aws:iam::[0-9]{12}:instance-profile/.*', max_length=10000)
    ]
):
    root: constr(
        pattern=r'arn:aws:iam::[0-9]{12}:instance-profile/.*', max_length=10000
    )


class Integer(RootModel[int]):
    root: int


class InvalidNextTokenException(RootModel[Any]):
    root: Any


class InvalidStateException(RootModel[Any]):
    root: Any


class KeyPair(RootModel[constr(pattern=r'.*', max_length=10000)]):
    root: constr(pattern=r'.*', max_length=10000)


class LimitExceededException(RootModel[Any]):
    root: Any


class MaintenanceStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'


class MaxResults(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class NextToken(RootModel[constr(pattern=r'\(\?s\).*', max_length=10000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=10000)


class NodeAssociationStatus(Enum):
    SUCCESS = 'SUCCESS'
    FAILED = 'FAILED'
    IN_PROGRESS = 'IN_PROGRESS'


class NodeAssociationStatusToken(
    RootModel[constr(pattern=r'\(\?s\).*', max_length=10000)]
):
    root: constr(pattern=r'\(\?s\).*', max_length=10000)


class NodeName(RootModel[constr(pattern=r'^[\-\p{Alnum}_:.]+$', max_length=10000)]):
    root: constr(pattern=r'^[\-\p{Alnum}_:.]+$', max_length=10000) = Field(
        ...,
        description='The node name that is used by <code>chef-client</code> or <code>puppet-agent</code>for a new node. We recommend to use a unique FQDN as hostname. For more information, see the <a href="https://docs.aws.amazon.com/https:/docs.chef.io/nodes.html#about-node-names">Chef</a> or <a href="https://docs.aws.amazon.com/https:/docs.puppet.com/puppet/4.10/man/agent.html">Puppet</a> documentation. ',
    )


class ResourceAlreadyExistsException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ServerName(
    RootModel[constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1, max_length=40)]
):
    root: constr(pattern=r'[a-zA-Z][a-zA-Z0-9\-]*', min_length=1, max_length=40)


class ServerStatus(Enum):
    BACKING_UP = 'BACKING_UP'
    CONNECTION_LOST = 'CONNECTION_LOST'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    MODIFYING = 'MODIFYING'
    FAILED = 'FAILED'
    HEALTHY = 'HEALTHY'
    RUNNING = 'RUNNING'
    RESTORING = 'RESTORING'
    SETUP = 'SETUP'
    UNDER_MAINTENANCE = 'UNDER_MAINTENANCE'
    UNHEALTHY = 'UNHEALTHY'
    TERMINATED = 'TERMINATED'


class ServiceRoleArn(
    RootModel[constr(pattern=r'arn:aws:iam::[0-9]{12}:role/.*', max_length=10000)]
):
    root: constr(pattern=r'arn:aws:iam::[0-9]{12}:role/.*', max_length=10000)


class String(RootModel[constr(pattern=r'\(\?s\).*', max_length=10000)]):
    root: constr(pattern=r'\(\?s\).*', max_length=10000)


class Strings(RootModel[List[String]]):
    root: List[String]


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=0, max_length=256
    )


class TimeWindowDefinition(
    RootModel[
        constr(
            pattern=r'^((Mon|Tue|Wed|Thu|Fri|Sat|Sun):)?([0-1][0-9]|2[0-3]):[0-5][0-9]$',
            max_length=10000,
        )
    ]
):
    root: constr(
        pattern=r'^((Mon|Tue|Wed|Thu|Fri|Sat|Sun):)?([0-1][0-9]|2[0-3]):[0-5][0-9]$',
        max_length=10000,
    ) = Field(
        ...,
        description='<p> <code>DDD:HH:MM</code> (weekly start time) or <code>HH:MM</code> (daily start time). </p> <p> Time windows always use coordinated universal time (UTC). Valid strings for day of week (<code>DDD</code>) are: <code>Mon</code>, <code>Tue</code>, <code>Wed</code>, <code>Thr</code>, <code>Fri</code>, <code>Sat</code>, or <code>Sun</code>.</p>',
    )


class Timestamp(RootModel[datetime]):
    root: datetime


class UntagResourceRequest(BaseModel):
    ResourceArn: AWSOpsWorksCMResourceArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateServerEngineAttributesRequest(BaseModel):
    AttributeName_1: AttributeName = Field(..., alias='AttributeName')
    AttributeValue_1: Optional[AttributeValue] = Field(None, alias='AttributeValue')
    ServerName_1: ServerName = Field(..., alias='ServerName')


class UpdateServerRequest(BaseModel):
    BackupRetentionCount: Optional[Integer] = None
    DisableAutomatedBackup: Optional[Boolean] = None
    PreferredBackupWindow: Optional[TimeWindowDefinition] = None
    PreferredMaintenanceWindow: Optional[TimeWindowDefinition] = None
    ServerName_1: ServerName = Field(..., alias='ServerName')


class ValidationException(RootModel[Any]):
    root: Any


class XAmzTarget(Enum):
    OpsWorksCM_V2016_11_01_AssociateNode = 'OpsWorksCM_V2016_11_01.AssociateNode'


class XAmzTarget1(Enum):
    OpsWorksCM_V2016_11_01_CreateBackup = 'OpsWorksCM_V2016_11_01.CreateBackup'


class XAmzTarget2(Enum):
    OpsWorksCM_V2016_11_01_CreateServer = 'OpsWorksCM_V2016_11_01.CreateServer'


class XAmzTarget3(Enum):
    OpsWorksCM_V2016_11_01_DeleteBackup = 'OpsWorksCM_V2016_11_01.DeleteBackup'


class XAmzTarget4(Enum):
    OpsWorksCM_V2016_11_01_DeleteServer = 'OpsWorksCM_V2016_11_01.DeleteServer'


class XAmzTarget5(Enum):
    OpsWorksCM_V2016_11_01_DescribeAccountAttributes = (
        'OpsWorksCM_V2016_11_01.DescribeAccountAttributes'
    )


class XAmzTarget6(Enum):
    OpsWorksCM_V2016_11_01_DescribeBackups = 'OpsWorksCM_V2016_11_01.DescribeBackups'


class XAmzTarget7(Enum):
    OpsWorksCM_V2016_11_01_DescribeEvents = 'OpsWorksCM_V2016_11_01.DescribeEvents'


class XAmzTarget8(Enum):
    OpsWorksCM_V2016_11_01_DescribeNodeAssociationStatus = (
        'OpsWorksCM_V2016_11_01.DescribeNodeAssociationStatus'
    )


class XAmzTarget9(Enum):
    OpsWorksCM_V2016_11_01_DescribeServers = 'OpsWorksCM_V2016_11_01.DescribeServers'


class XAmzTarget10(Enum):
    OpsWorksCM_V2016_11_01_DisassociateNode = 'OpsWorksCM_V2016_11_01.DisassociateNode'


class XAmzTarget11(Enum):
    OpsWorksCM_V2016_11_01_ExportServerEngineAttribute = (
        'OpsWorksCM_V2016_11_01.ExportServerEngineAttribute'
    )


class XAmzTarget12(Enum):
    OpsWorksCM_V2016_11_01_ListTagsForResource = (
        'OpsWorksCM_V2016_11_01.ListTagsForResource'
    )


class XAmzTarget13(Enum):
    OpsWorksCM_V2016_11_01_RestoreServer = 'OpsWorksCM_V2016_11_01.RestoreServer'


class XAmzTarget14(Enum):
    OpsWorksCM_V2016_11_01_StartMaintenance = 'OpsWorksCM_V2016_11_01.StartMaintenance'


class XAmzTarget15(Enum):
    OpsWorksCM_V2016_11_01_TagResource = 'OpsWorksCM_V2016_11_01.TagResource'


class XAmzTarget16(Enum):
    OpsWorksCM_V2016_11_01_UntagResource = 'OpsWorksCM_V2016_11_01.UntagResource'


class XAmzTarget17(Enum):
    OpsWorksCM_V2016_11_01_UpdateServer = 'OpsWorksCM_V2016_11_01.UpdateServer'


class XAmzTarget18(Enum):
    OpsWorksCM_V2016_11_01_UpdateServerEngineAttributes = (
        'OpsWorksCM_V2016_11_01.UpdateServerEngineAttributes'
    )


class AccountAttribute(BaseModel):
    Maximum: Optional[Integer] = None
    Name: Optional[String] = None
    Used: Optional[Integer] = None


class AccountAttributes(RootModel[List[AccountAttribute]]):
    root: List[AccountAttribute] = Field(
        ..., description=' A list of individual account attributes. '
    )


class AssociateNodeResponse(BaseModel):
    NodeAssociationStatusToken_1: Optional[NodeAssociationStatusToken] = Field(
        None, alias='NodeAssociationStatusToken'
    )


class Backup(BaseModel):
    BackupArn: Optional[String] = None
    BackupId_1: Optional[BackupId] = Field(None, alias='BackupId')
    BackupType_1: Optional[BackupType] = Field(None, alias='BackupType')
    CreatedAt: Optional[Timestamp] = None
    Description: Optional[String] = None
    Engine: Optional[String] = None
    EngineModel: Optional[String] = None
    EngineVersion: Optional[String] = None
    InstanceProfileArn: Optional[String] = None
    InstanceType: Optional[String] = None
    KeyPair: Optional[String] = None
    PreferredBackupWindow: Optional[TimeWindowDefinition] = None
    PreferredMaintenanceWindow: Optional[TimeWindowDefinition] = None
    S3DataSize: Optional[Integer] = None
    S3DataUrl: Optional[String] = None
    S3LogUrl: Optional[String] = None
    SecurityGroupIds: Optional[Strings] = None
    ServerName_1: Optional[ServerName] = Field(None, alias='ServerName')
    ServiceRoleArn: Optional[String] = None
    Status: Optional[BackupStatus] = None
    StatusDescription: Optional[String] = None
    SubnetIds: Optional[Strings] = None
    ToolsVersion: Optional[String] = None
    UserArn: Optional[String] = None


class Backups(RootModel[List[Backup]]):
    root: List[Backup]


class CreateBackupResponse(BaseModel):
    Backup_1: Optional[Backup] = Field(None, alias='Backup')


class DeleteServerRequest(BaseModel):
    ServerName_1: ServerName = Field(..., alias='ServerName')


class DescribeAccountAttributesResponse(BaseModel):
    Attributes: Optional[AccountAttributes] = None


class DescribeBackupsRequest(BaseModel):
    BackupId_1: Optional[BackupId] = Field(None, alias='BackupId')
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerName_1: Optional[ServerName] = Field(None, alias='ServerName')


class DescribeBackupsResponse(BaseModel):
    Backups_1: Optional[Backups] = Field(None, alias='Backups')
    NextToken: Optional[String] = None


class DescribeEventsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerName_1: ServerName = Field(..., alias='ServerName')


class DescribeNodeAssociationStatusRequest(BaseModel):
    NodeAssociationStatusToken_1: NodeAssociationStatusToken = Field(
        ..., alias='NodeAssociationStatusToken'
    )
    ServerName_1: ServerName = Field(..., alias='ServerName')


class DescribeServersRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ServerName_1: Optional[ServerName] = Field(None, alias='ServerName')


class DisassociateNodeResponse(BaseModel):
    NodeAssociationStatusToken_1: Optional[NodeAssociationStatusToken] = Field(
        None, alias='NodeAssociationStatusToken'
    )


class EngineAttribute(BaseModel):
    Name: Optional[EngineAttributeName] = None
    Value: Optional[EngineAttributeValue] = None


class EngineAttributes(RootModel[List[EngineAttribute]]):
    root: List[EngineAttribute]


class ExportServerEngineAttributeRequest(BaseModel):
    ExportAttributeName: String
    InputAttributes: Optional[EngineAttributes] = None
    ServerName_1: ServerName = Field(..., alias='ServerName')


class ExportServerEngineAttributeResponse(BaseModel):
    EngineAttribute_1: Optional[EngineAttribute] = Field(None, alias='EngineAttribute')
    ServerName_1: Optional[ServerName] = Field(None, alias='ServerName')


class ListTagsForResourceRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ResourceArn: AWSOpsWorksCMResourceArn


class RestoreServerRequest(BaseModel):
    BackupId_1: BackupId = Field(..., alias='BackupId')
    InstanceType: Optional[String] = None
    KeyPair_1: Optional[KeyPair] = Field(None, alias='KeyPair')
    ServerName_1: ServerName = Field(..., alias='ServerName')


class Server(BaseModel):
    AssociatePublicIpAddress: Optional[Boolean] = None
    BackupRetentionCount: Optional[Integer] = None
    CloudFormationStackArn: Optional[String] = None
    CreatedAt: Optional[Timestamp] = None
    CustomDomain_1: Optional[CustomDomain] = Field(None, alias='CustomDomain')
    DisableAutomatedBackup: Optional[Boolean] = None
    Endpoint: Optional[String] = None
    Engine: Optional[String] = None
    EngineAttributes_1: Optional[EngineAttributes] = Field(
        None, alias='EngineAttributes'
    )
    EngineModel: Optional[String] = None
    EngineVersion: Optional[String] = None
    InstanceProfileArn: Optional[String] = None
    InstanceType: Optional[String] = None
    KeyPair: Optional[String] = None
    MaintenanceStatus_1: Optional[MaintenanceStatus] = Field(
        None, alias='MaintenanceStatus'
    )
    PreferredBackupWindow: Optional[TimeWindowDefinition] = None
    PreferredMaintenanceWindow: Optional[TimeWindowDefinition] = None
    SecurityGroupIds: Optional[Strings] = None
    ServerArn: Optional[String] = None
    ServerName: Optional[String] = None
    ServiceRoleArn: Optional[String] = None
    Status: Optional[ServerStatus] = None
    StatusReason: Optional[String] = None
    SubnetIds: Optional[Strings] = None


class ServerEvent(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    LogUrl: Optional[String] = None
    Message: Optional[String] = None
    ServerName: Optional[String] = None


class ServerEvents(RootModel[List[ServerEvent]]):
    root: List[ServerEvent]


class Servers(RootModel[List[Server]]):
    root: List[Server]


class StartMaintenanceRequest(BaseModel):
    EngineAttributes_1: Optional[EngineAttributes] = Field(
        None, alias='EngineAttributes'
    )
    ServerName_1: ServerName = Field(..., alias='ServerName')


class StartMaintenanceResponse(BaseModel):
    Server_1: Optional[Server] = Field(None, alias='Server')


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceArn: AWSOpsWorksCMResourceArn
    Tags: TagList


class UpdateServerEngineAttributesResponse(BaseModel):
    Server_1: Optional[Server] = Field(None, alias='Server')


class UpdateServerResponse(BaseModel):
    Server_1: Optional[Server] = Field(None, alias='Server')


class AssociateNodeRequest(BaseModel):
    EngineAttributes_1: EngineAttributes = Field(..., alias='EngineAttributes')
    NodeName_1: NodeName = Field(..., alias='NodeName')
    ServerName_1: ServerName = Field(..., alias='ServerName')


class CreateBackupRequest(BaseModel):
    Description: Optional[String] = None
    ServerName_1: ServerName = Field(..., alias='ServerName')
    Tags: Optional[TagList] = None


class CreateServerRequest(BaseModel):
    AssociatePublicIpAddress: Optional[Boolean] = None
    BackupId_1: Optional[BackupId] = Field(None, alias='BackupId')
    BackupRetentionCount: Optional[BackupRetentionCountDefinition] = None
    CustomCertificate_1: Optional[CustomCertificate] = Field(
        None, alias='CustomCertificate'
    )
    CustomDomain_1: Optional[CustomDomain] = Field(None, alias='CustomDomain')
    CustomPrivateKey_1: Optional[CustomPrivateKey] = Field(
        None, alias='CustomPrivateKey'
    )
    DisableAutomatedBackup: Optional[Boolean] = None
    Engine: String
    EngineAttributes_1: Optional[EngineAttributes] = Field(
        None, alias='EngineAttributes'
    )
    EngineModel: Optional[String] = None
    EngineVersion: Optional[String] = None
    InstanceProfileArn_1: InstanceProfileArn = Field(..., alias='InstanceProfileArn')
    InstanceType: String
    KeyPair_1: Optional[KeyPair] = Field(None, alias='KeyPair')
    PreferredBackupWindow: Optional[TimeWindowDefinition] = None
    PreferredMaintenanceWindow: Optional[TimeWindowDefinition] = None
    SecurityGroupIds: Optional[Strings] = None
    ServerName_1: ServerName = Field(..., alias='ServerName')
    ServiceRoleArn_1: ServiceRoleArn = Field(..., alias='ServiceRoleArn')
    SubnetIds: Optional[Strings] = None
    Tags: Optional[TagList] = None


class CreateServerResponse(BaseModel):
    Server_1: Optional[Server] = Field(None, alias='Server')


class DescribeEventsResponse(BaseModel):
    NextToken: Optional[String] = None
    ServerEvents_1: Optional[ServerEvents] = Field(None, alias='ServerEvents')


class DescribeNodeAssociationStatusResponse(BaseModel):
    EngineAttributes_1: Optional[EngineAttributes] = Field(
        None, alias='EngineAttributes'
    )
    NodeAssociationStatus_1: Optional[NodeAssociationStatus] = Field(
        None, alias='NodeAssociationStatus'
    )


class DescribeServersResponse(BaseModel):
    NextToken: Optional[String] = None
    Servers_1: Optional[Servers] = Field(None, alias='Servers')


class DisassociateNodeRequest(BaseModel):
    EngineAttributes_1: Optional[EngineAttributes] = Field(
        None, alias='EngineAttributes'
    )
    NodeName_1: NodeName = Field(..., alias='NodeName')
    ServerName_1: ServerName = Field(..., alias='ServerName')


class ListTagsForResourceResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Tags: Optional[TagList] = None


class RestoreServerResponse(BaseModel):
    Server_1: Optional[Server] = Field(None, alias='Server')
